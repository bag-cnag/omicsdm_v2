// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from "@hey-api/client-fetch";
import {
  queryOptions,
  type MutationOptions,
  infiniteQueryOptions,
  type InfiniteData,
} from "@tanstack/svelte-query";
import {
  client,
  getLive,
  getLogin,
  postRefresh,
  postLogout,
  getSynAck,
  getSchema,
  getAuthenticated,
  getKcSync,
  postUsers,
  getUsers,
  getUsersSchema,
  getUsersByUsername,
  deleteUsersByUsername,
  putUsersByUsername,
  getUsersByUsernameByAttribute,
  postGroups,
  getGroups,
  getGroupsSchema,
  getGroupsByPath,
  deleteGroupsByPath,
  putGroupsByPath,
  getGroupsByPathByAttribute,
  postFilesByIdByVersionVisualize,
  getFilesByIdByVersionDownload,
  putFilesByIdByVersionComplete,
  postFiles,
  getFiles,
  getFilesSchema,
  getFilesByIdByVersion,
  deleteFilesByIdByVersion,
  putFilesByIdByVersion,
  getFilesByIdByVersionByAttribute,
  postFilesByIdByVersionRelease,
  postProjects,
  getProjects,
  getProjectsSchema,
  getProjectsById,
  deleteProjectsById,
  putProjectsById,
  getProjectsByIdByAttribute,
  postDatasets,
  getDatasets,
  getDatasetsSchema,
  getDatasetsByIdByVersion,
  deleteDatasetsByIdByVersion,
  putDatasetsByIdByVersion,
  getDatasetsByIdByVersionByAttribute,
  postDatasetsByIdByVersionRelease,
  getK8s,
  getK8sInstanceById,
  getK8sSchema,
} from "../services.gen";
import type {
  GetLoginData,
  PostRefreshData,
  PostRefreshError,
  PostRefreshResponse,
  PostLogoutData,
  PostLogoutError,
  PostLogoutResponse,
  GetSynAckData,
  PostUsersData,
  PostUsersError,
  PostUsersResponse,
  GetUsersData,
  GetUsersError,
  GetUsersResponse,
  GetUsersByUsernameData,
  DeleteUsersByUsernameData,
  DeleteUsersByUsernameError,
  DeleteUsersByUsernameResponse,
  PutUsersByUsernameData,
  PutUsersByUsernameError,
  PutUsersByUsernameResponse,
  GetUsersByUsernameByAttributeData,
  PostGroupsData,
  PostGroupsError,
  PostGroupsResponse,
  GetGroupsData,
  GetGroupsError,
  GetGroupsResponse,
  GetGroupsByPathData,
  DeleteGroupsByPathData,
  DeleteGroupsByPathError,
  DeleteGroupsByPathResponse,
  PutGroupsByPathData,
  PutGroupsByPathError,
  PutGroupsByPathResponse,
  GetGroupsByPathByAttributeData,
  PostFilesByIdByVersionVisualizeData,
  PostFilesByIdByVersionVisualizeError,
  PostFilesByIdByVersionVisualizeResponse,
  GetFilesByIdByVersionDownloadData,
  PutFilesByIdByVersionCompleteData,
  PutFilesByIdByVersionCompleteError,
  PutFilesByIdByVersionCompleteResponse,
  PostFilesData,
  PostFilesError,
  PostFilesResponse,
  GetFilesData,
  GetFilesError,
  GetFilesResponse,
  GetFilesByIdByVersionData,
  DeleteFilesByIdByVersionData,
  DeleteFilesByIdByVersionError,
  DeleteFilesByIdByVersionResponse,
  PutFilesByIdByVersionData,
  PutFilesByIdByVersionError,
  PutFilesByIdByVersionResponse,
  GetFilesByIdByVersionByAttributeData,
  PostFilesByIdByVersionReleaseData,
  PostFilesByIdByVersionReleaseError,
  PostFilesByIdByVersionReleaseResponse,
  PostProjectsData,
  PostProjectsError,
  PostProjectsResponse,
  GetProjectsData,
  GetProjectsError,
  GetProjectsResponse,
  GetProjectsByIdData,
  DeleteProjectsByIdData,
  DeleteProjectsByIdError,
  DeleteProjectsByIdResponse,
  PutProjectsByIdData,
  PutProjectsByIdError,
  PutProjectsByIdResponse,
  GetProjectsByIdByAttributeData,
  PostDatasetsData,
  PostDatasetsError,
  PostDatasetsResponse,
  GetDatasetsData,
  GetDatasetsError,
  GetDatasetsResponse,
  GetDatasetsByIdByVersionData,
  DeleteDatasetsByIdByVersionData,
  DeleteDatasetsByIdByVersionError,
  DeleteDatasetsByIdByVersionResponse,
  PutDatasetsByIdByVersionData,
  PutDatasetsByIdByVersionError,
  PutDatasetsByIdByVersionResponse,
  GetDatasetsByIdByVersionByAttributeData,
  PostDatasetsByIdByVersionReleaseData,
  PostDatasetsByIdByVersionReleaseError,
  PostDatasetsByIdByVersionReleaseResponse,
} from "../types.gen";

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const getLiveQueryKey = (options?: Options) => [
  createQueryKey("getLive", options),
];

export const getLiveOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLive({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getLiveQueryKey(options),
  });
};

export const getLoginQueryKey = (options?: Options<GetLoginData>) => [
  createQueryKey("getLogin", options),
];

export const getLoginOptions = (options?: Options<GetLoginData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getLoginQueryKey(options),
  });
};

export const postRefreshQueryKey = (options: Options<PostRefreshData>) => [
  createQueryKey("postRefresh", options),
];

export const postRefreshOptions = (options: Options<PostRefreshData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postRefresh({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postRefreshQueryKey(options),
  });
};

export const postRefreshMutation = (
  options?: Partial<Options<PostRefreshData>>,
) => {
  const mutationOptions: MutationOptions<
    PostRefreshResponse,
    PostRefreshError,
    Options<PostRefreshData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postRefresh({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postLogoutQueryKey = (options: Options<PostLogoutData>) => [
  createQueryKey("postLogout", options),
];

export const postLogoutOptions = (options: Options<PostLogoutData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postLogout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postLogoutQueryKey(options),
  });
};

export const postLogoutMutation = (
  options?: Partial<Options<PostLogoutData>>,
) => {
  const mutationOptions: MutationOptions<
    PostLogoutResponse,
    PostLogoutError,
    Options<PostLogoutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postLogout({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getSynAckQueryKey = (options: Options<GetSynAckData>) => [
  createQueryKey("getSynAck", options),
];

export const getSynAckOptions = (options: Options<GetSynAckData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getSynAck({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getSynAckQueryKey(options),
  });
};

export const getSchemaQueryKey = (options?: Options) => [
  createQueryKey("getSchema", options),
];

export const getSchemaOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getSchema({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getSchemaQueryKey(options),
  });
};

export const getAuthenticatedQueryKey = (options?: Options) => [
  createQueryKey("getAuthenticated", options),
];

export const getAuthenticatedOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuthenticated({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getAuthenticatedQueryKey(options),
  });
};

export const getKcSyncQueryKey = (options?: Options) => [
  createQueryKey("getKcSync", options),
];

export const getKcSyncOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getKcSync({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getKcSyncQueryKey(options),
  });
};

export const postUsersQueryKey = (options: Options<PostUsersData>) => [
  createQueryKey("postUsers", options),
];

export const postUsersOptions = (options: Options<PostUsersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postUsersQueryKey(options),
  });
};

export const postUsersMutation = (
  options?: Partial<Options<PostUsersData>>,
) => {
  const mutationOptions: MutationOptions<
    PostUsersResponse,
    PostUsersError,
    Options<PostUsersData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postUsers({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getUsersQueryKey = (options?: Options<GetUsersData>) => [
  createQueryKey("getUsers", options),
];

export const getUsersOptions = (options?: Options<GetUsersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getUsersQueryKey(options),
  });
};

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], "body" | "headers" | "path" | "query">,
>(
  queryKey: QueryKey<Options>,
  page: K,
) => {
  const params = queryKey[0];
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    };
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    };
  }
  if (page.path) {
    params.path = {
      ...queryKey[0].path,
      ...page.path,
    };
  }
  if (page.query) {
    params.query = {
      ...queryKey[0].query,
      ...page.query,
    };
  }
  return params as unknown as typeof page;
};

export const getUsersInfiniteQueryKey = (
  options?: Options<GetUsersData>,
): QueryKey<Options<GetUsersData>> => [
  createQueryKey("getUsers", options, true),
];

export const getUsersInfiniteOptions = (options?: Options<GetUsersData>) => {
  return infiniteQueryOptions<
    GetUsersResponse,
    GetUsersError,
    InfiniteData<GetUsersResponse>,
    QueryKey<Options<GetUsersData>>,
    | number
    | Pick<
        QueryKey<Options<GetUsersData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetUsersData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  start: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getUsers({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getUsersInfiniteQueryKey(options),
    },
  );
};

export const getUsersSchemaQueryKey = (options?: Options) => [
  createQueryKey("getUsersSchema", options),
];

export const getUsersSchemaOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUsersSchema({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getUsersSchemaQueryKey(options),
  });
};

export const getUsersByUsernameQueryKey = (
  options: Options<GetUsersByUsernameData>,
) => [createQueryKey("getUsersByUsername", options)];

export const getUsersByUsernameOptions = (
  options: Options<GetUsersByUsernameData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUsersByUsername({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getUsersByUsernameQueryKey(options),
  });
};

export const deleteUsersByUsernameMutation = (
  options?: Partial<Options<DeleteUsersByUsernameData>>,
) => {
  const mutationOptions: MutationOptions<
    DeleteUsersByUsernameResponse,
    DeleteUsersByUsernameError,
    Options<DeleteUsersByUsernameData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteUsersByUsername({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putUsersByUsernameMutation = (
  options?: Partial<Options<PutUsersByUsernameData>>,
) => {
  const mutationOptions: MutationOptions<
    PutUsersByUsernameResponse,
    PutUsersByUsernameError,
    Options<PutUsersByUsernameData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putUsersByUsername({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getUsersByUsernameByAttributeQueryKey = (
  options: Options<GetUsersByUsernameByAttributeData>,
) => [createQueryKey("getUsersByUsernameByAttribute", options)];

export const getUsersByUsernameByAttributeOptions = (
  options: Options<GetUsersByUsernameByAttributeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUsersByUsernameByAttribute({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getUsersByUsernameByAttributeQueryKey(options),
  });
};

export const postGroupsQueryKey = (options: Options<PostGroupsData>) => [
  createQueryKey("postGroups", options),
];

export const postGroupsOptions = (options: Options<PostGroupsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postGroups({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postGroupsQueryKey(options),
  });
};

export const postGroupsMutation = (
  options?: Partial<Options<PostGroupsData>>,
) => {
  const mutationOptions: MutationOptions<
    PostGroupsResponse,
    PostGroupsError,
    Options<PostGroupsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postGroups({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getGroupsQueryKey = (options?: Options<GetGroupsData>) => [
  createQueryKey("getGroups", options),
];

export const getGroupsOptions = (options?: Options<GetGroupsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getGroups({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getGroupsQueryKey(options),
  });
};

export const getGroupsInfiniteQueryKey = (
  options?: Options<GetGroupsData>,
): QueryKey<Options<GetGroupsData>> => [
  createQueryKey("getGroups", options, true),
];

export const getGroupsInfiniteOptions = (options?: Options<GetGroupsData>) => {
  return infiniteQueryOptions<
    GetGroupsResponse,
    GetGroupsError,
    InfiniteData<GetGroupsResponse>,
    QueryKey<Options<GetGroupsData>>,
    | number
    | Pick<
        QueryKey<Options<GetGroupsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetGroupsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  start: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getGroups({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getGroupsInfiniteQueryKey(options),
    },
  );
};

export const getGroupsSchemaQueryKey = (options?: Options) => [
  createQueryKey("getGroupsSchema", options),
];

export const getGroupsSchemaOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getGroupsSchema({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getGroupsSchemaQueryKey(options),
  });
};

export const getGroupsByPathQueryKey = (
  options: Options<GetGroupsByPathData>,
) => [createQueryKey("getGroupsByPath", options)];

export const getGroupsByPathOptions = (
  options: Options<GetGroupsByPathData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getGroupsByPath({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getGroupsByPathQueryKey(options),
  });
};

export const deleteGroupsByPathMutation = (
  options?: Partial<Options<DeleteGroupsByPathData>>,
) => {
  const mutationOptions: MutationOptions<
    DeleteGroupsByPathResponse,
    DeleteGroupsByPathError,
    Options<DeleteGroupsByPathData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteGroupsByPath({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putGroupsByPathMutation = (
  options?: Partial<Options<PutGroupsByPathData>>,
) => {
  const mutationOptions: MutationOptions<
    PutGroupsByPathResponse,
    PutGroupsByPathError,
    Options<PutGroupsByPathData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putGroupsByPath({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getGroupsByPathByAttributeQueryKey = (
  options: Options<GetGroupsByPathByAttributeData>,
) => [createQueryKey("getGroupsByPathByAttribute", options)];

export const getGroupsByPathByAttributeOptions = (
  options: Options<GetGroupsByPathByAttributeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getGroupsByPathByAttribute({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getGroupsByPathByAttributeQueryKey(options),
  });
};

export const postFilesByIdByVersionVisualizeQueryKey = (
  options: Options<PostFilesByIdByVersionVisualizeData>,
) => [createQueryKey("postFilesByIdByVersionVisualize", options)];

export const postFilesByIdByVersionVisualizeOptions = (
  options: Options<PostFilesByIdByVersionVisualizeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postFilesByIdByVersionVisualize({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postFilesByIdByVersionVisualizeQueryKey(options),
  });
};

export const postFilesByIdByVersionVisualizeMutation = (
  options?: Partial<Options<PostFilesByIdByVersionVisualizeData>>,
) => {
  const mutationOptions: MutationOptions<
    PostFilesByIdByVersionVisualizeResponse,
    PostFilesByIdByVersionVisualizeError,
    Options<PostFilesByIdByVersionVisualizeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postFilesByIdByVersionVisualize({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getFilesByIdByVersionDownloadQueryKey = (
  options: Options<GetFilesByIdByVersionDownloadData>,
) => [createQueryKey("getFilesByIdByVersionDownload", options)];

export const getFilesByIdByVersionDownloadOptions = (
  options: Options<GetFilesByIdByVersionDownloadData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getFilesByIdByVersionDownload({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getFilesByIdByVersionDownloadQueryKey(options),
  });
};

export const putFilesByIdByVersionCompleteMutation = (
  options?: Partial<Options<PutFilesByIdByVersionCompleteData>>,
) => {
  const mutationOptions: MutationOptions<
    PutFilesByIdByVersionCompleteResponse,
    PutFilesByIdByVersionCompleteError,
    Options<PutFilesByIdByVersionCompleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putFilesByIdByVersionComplete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postFilesQueryKey = (options: Options<PostFilesData>) => [
  createQueryKey("postFiles", options),
];

export const postFilesOptions = (options: Options<PostFilesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postFiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postFilesQueryKey(options),
  });
};

export const postFilesMutation = (
  options?: Partial<Options<PostFilesData>>,
) => {
  const mutationOptions: MutationOptions<
    PostFilesResponse,
    PostFilesError,
    Options<PostFilesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postFiles({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getFilesQueryKey = (options?: Options<GetFilesData>) => [
  createQueryKey("getFiles", options),
];

export const getFilesOptions = (options?: Options<GetFilesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getFiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getFilesQueryKey(options),
  });
};

export const getFilesInfiniteQueryKey = (
  options?: Options<GetFilesData>,
): QueryKey<Options<GetFilesData>> => [
  createQueryKey("getFiles", options, true),
];

export const getFilesInfiniteOptions = (options?: Options<GetFilesData>) => {
  return infiniteQueryOptions<
    GetFilesResponse,
    GetFilesError,
    InfiniteData<GetFilesResponse>,
    QueryKey<Options<GetFilesData>>,
    | number
    | Pick<
        QueryKey<Options<GetFilesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetFilesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  start: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getFiles({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getFilesInfiniteQueryKey(options),
    },
  );
};

export const getFilesSchemaQueryKey = (options?: Options) => [
  createQueryKey("getFilesSchema", options),
];

export const getFilesSchemaOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getFilesSchema({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getFilesSchemaQueryKey(options),
  });
};

export const getFilesByIdByVersionQueryKey = (
  options: Options<GetFilesByIdByVersionData>,
) => [createQueryKey("getFilesByIdByVersion", options)];

export const getFilesByIdByVersionOptions = (
  options: Options<GetFilesByIdByVersionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getFilesByIdByVersion({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getFilesByIdByVersionQueryKey(options),
  });
};

export const deleteFilesByIdByVersionMutation = (
  options?: Partial<Options<DeleteFilesByIdByVersionData>>,
) => {
  const mutationOptions: MutationOptions<
    DeleteFilesByIdByVersionResponse,
    DeleteFilesByIdByVersionError,
    Options<DeleteFilesByIdByVersionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteFilesByIdByVersion({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putFilesByIdByVersionMutation = (
  options?: Partial<Options<PutFilesByIdByVersionData>>,
) => {
  const mutationOptions: MutationOptions<
    PutFilesByIdByVersionResponse,
    PutFilesByIdByVersionError,
    Options<PutFilesByIdByVersionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putFilesByIdByVersion({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getFilesByIdByVersionByAttributeQueryKey = (
  options: Options<GetFilesByIdByVersionByAttributeData>,
) => [createQueryKey("getFilesByIdByVersionByAttribute", options)];

export const getFilesByIdByVersionByAttributeOptions = (
  options: Options<GetFilesByIdByVersionByAttributeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getFilesByIdByVersionByAttribute({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getFilesByIdByVersionByAttributeQueryKey(options),
  });
};

export const postFilesByIdByVersionReleaseQueryKey = (
  options: Options<PostFilesByIdByVersionReleaseData>,
) => [createQueryKey("postFilesByIdByVersionRelease", options)];

export const postFilesByIdByVersionReleaseOptions = (
  options: Options<PostFilesByIdByVersionReleaseData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postFilesByIdByVersionRelease({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postFilesByIdByVersionReleaseQueryKey(options),
  });
};

export const postFilesByIdByVersionReleaseMutation = (
  options?: Partial<Options<PostFilesByIdByVersionReleaseData>>,
) => {
  const mutationOptions: MutationOptions<
    PostFilesByIdByVersionReleaseResponse,
    PostFilesByIdByVersionReleaseError,
    Options<PostFilesByIdByVersionReleaseData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postFilesByIdByVersionRelease({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postProjectsQueryKey = (options: Options<PostProjectsData>) => [
  createQueryKey("postProjects", options),
];

export const postProjectsOptions = (options: Options<PostProjectsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postProjects({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postProjectsQueryKey(options),
  });
};

export const postProjectsMutation = (
  options?: Partial<Options<PostProjectsData>>,
) => {
  const mutationOptions: MutationOptions<
    PostProjectsResponse,
    PostProjectsError,
    Options<PostProjectsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postProjects({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getProjectsQueryKey = (options?: Options<GetProjectsData>) => [
  createQueryKey("getProjects", options),
];

export const getProjectsOptions = (options?: Options<GetProjectsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProjects({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getProjectsQueryKey(options),
  });
};

export const getProjectsInfiniteQueryKey = (
  options?: Options<GetProjectsData>,
): QueryKey<Options<GetProjectsData>> => [
  createQueryKey("getProjects", options, true),
];

export const getProjectsInfiniteOptions = (
  options?: Options<GetProjectsData>,
) => {
  return infiniteQueryOptions<
    GetProjectsResponse,
    GetProjectsError,
    InfiniteData<GetProjectsResponse>,
    QueryKey<Options<GetProjectsData>>,
    | number
    | Pick<
        QueryKey<Options<GetProjectsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetProjectsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  start: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getProjects({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getProjectsInfiniteQueryKey(options),
    },
  );
};

export const getProjectsSchemaQueryKey = (options?: Options) => [
  createQueryKey("getProjectsSchema", options),
];

export const getProjectsSchemaOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProjectsSchema({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getProjectsSchemaQueryKey(options),
  });
};

export const getProjectsByIdQueryKey = (
  options: Options<GetProjectsByIdData>,
) => [createQueryKey("getProjectsById", options)];

export const getProjectsByIdOptions = (
  options: Options<GetProjectsByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProjectsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getProjectsByIdQueryKey(options),
  });
};

export const deleteProjectsByIdMutation = (
  options?: Partial<Options<DeleteProjectsByIdData>>,
) => {
  const mutationOptions: MutationOptions<
    DeleteProjectsByIdResponse,
    DeleteProjectsByIdError,
    Options<DeleteProjectsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteProjectsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putProjectsByIdMutation = (
  options?: Partial<Options<PutProjectsByIdData>>,
) => {
  const mutationOptions: MutationOptions<
    PutProjectsByIdResponse,
    PutProjectsByIdError,
    Options<PutProjectsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putProjectsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getProjectsByIdByAttributeQueryKey = (
  options: Options<GetProjectsByIdByAttributeData>,
) => [createQueryKey("getProjectsByIdByAttribute", options)];

export const getProjectsByIdByAttributeOptions = (
  options: Options<GetProjectsByIdByAttributeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProjectsByIdByAttribute({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getProjectsByIdByAttributeQueryKey(options),
  });
};

export const postDatasetsQueryKey = (options: Options<PostDatasetsData>) => [
  createQueryKey("postDatasets", options),
];

export const postDatasetsOptions = (options: Options<PostDatasetsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postDatasets({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postDatasetsQueryKey(options),
  });
};

export const postDatasetsMutation = (
  options?: Partial<Options<PostDatasetsData>>,
) => {
  const mutationOptions: MutationOptions<
    PostDatasetsResponse,
    PostDatasetsError,
    Options<PostDatasetsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postDatasets({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getDatasetsQueryKey = (options?: Options<GetDatasetsData>) => [
  createQueryKey("getDatasets", options),
];

export const getDatasetsOptions = (options?: Options<GetDatasetsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getDatasets({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getDatasetsQueryKey(options),
  });
};

export const getDatasetsInfiniteQueryKey = (
  options?: Options<GetDatasetsData>,
): QueryKey<Options<GetDatasetsData>> => [
  createQueryKey("getDatasets", options, true),
];

export const getDatasetsInfiniteOptions = (
  options?: Options<GetDatasetsData>,
) => {
  return infiniteQueryOptions<
    GetDatasetsResponse,
    GetDatasetsError,
    InfiniteData<GetDatasetsResponse>,
    QueryKey<Options<GetDatasetsData>>,
    | number
    | Pick<
        QueryKey<Options<GetDatasetsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetDatasetsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  start: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await getDatasets({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: getDatasetsInfiniteQueryKey(options),
    },
  );
};

export const getDatasetsSchemaQueryKey = (options?: Options) => [
  createQueryKey("getDatasetsSchema", options),
];

export const getDatasetsSchemaOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getDatasetsSchema({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getDatasetsSchemaQueryKey(options),
  });
};

export const getDatasetsByIdByVersionQueryKey = (
  options: Options<GetDatasetsByIdByVersionData>,
) => [createQueryKey("getDatasetsByIdByVersion", options)];

export const getDatasetsByIdByVersionOptions = (
  options: Options<GetDatasetsByIdByVersionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getDatasetsByIdByVersion({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getDatasetsByIdByVersionQueryKey(options),
  });
};

export const deleteDatasetsByIdByVersionMutation = (
  options?: Partial<Options<DeleteDatasetsByIdByVersionData>>,
) => {
  const mutationOptions: MutationOptions<
    DeleteDatasetsByIdByVersionResponse,
    DeleteDatasetsByIdByVersionError,
    Options<DeleteDatasetsByIdByVersionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteDatasetsByIdByVersion({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putDatasetsByIdByVersionMutation = (
  options?: Partial<Options<PutDatasetsByIdByVersionData>>,
) => {
  const mutationOptions: MutationOptions<
    PutDatasetsByIdByVersionResponse,
    PutDatasetsByIdByVersionError,
    Options<PutDatasetsByIdByVersionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putDatasetsByIdByVersion({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getDatasetsByIdByVersionByAttributeQueryKey = (
  options: Options<GetDatasetsByIdByVersionByAttributeData>,
) => [createQueryKey("getDatasetsByIdByVersionByAttribute", options)];

export const getDatasetsByIdByVersionByAttributeOptions = (
  options: Options<GetDatasetsByIdByVersionByAttributeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getDatasetsByIdByVersionByAttribute({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getDatasetsByIdByVersionByAttributeQueryKey(options),
  });
};

export const postDatasetsByIdByVersionReleaseQueryKey = (
  options: Options<PostDatasetsByIdByVersionReleaseData>,
) => [createQueryKey("postDatasetsByIdByVersionRelease", options)];

export const postDatasetsByIdByVersionReleaseOptions = (
  options: Options<PostDatasetsByIdByVersionReleaseData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postDatasetsByIdByVersionRelease({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postDatasetsByIdByVersionReleaseQueryKey(options),
  });
};

export const postDatasetsByIdByVersionReleaseMutation = (
  options?: Partial<Options<PostDatasetsByIdByVersionReleaseData>>,
) => {
  const mutationOptions: MutationOptions<
    PostDatasetsByIdByVersionReleaseResponse,
    PostDatasetsByIdByVersionReleaseError,
    Options<PostDatasetsByIdByVersionReleaseData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postDatasetsByIdByVersionRelease({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getK8sQueryKey = (options?: Options) => [
  createQueryKey("getK8s", options),
];

export const getK8sOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getK8s({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getK8sQueryKey(options),
  });
};

export const getK8sInstanceByIdQueryKey = (options?: Options) => [
  createQueryKey("getK8sInstanceById", options),
];

export const getK8sInstanceByIdOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getK8sInstanceById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getK8sInstanceByIdQueryKey(options),
  });
};

export const getK8sSchemaQueryKey = (options?: Options) => [
  createQueryKey("getK8sSchema", options),
];

export const getK8sSchemaOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getK8sSchema({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getK8sSchemaQueryKey(options),
  });
};
