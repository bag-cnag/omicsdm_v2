// This file is auto-generated by @hey-api/openapi-ts

export type AssoPermDatasetFiles = {
  id?: number;
  version?: number;
  id_write?: number;
  write?: ListGroup;
};

export type AssoPermDatasetSelf = {
  id?: number;
  version?: number;
  id_read?: number;
  read?: ListGroup;
  id_download?: number;
  download?: ListGroup;
};

export type AssoPermProjectDatasets = {
  id?: number;
  id_write?: number;
  write?: ListGroup;
  id_download?: number;
  download?: ListGroup;
};

export type Dataset = {
  id?: number;
  version?: number;
  readonly is_latest?: boolean;
  short_name: string;
  long_name?: string;
  description?: string;
  readonly submission_date?: string;
  disease: "COPD" | "ASTHMA" | "CD" | "UC" | "MS" | "SLE" | "RA";
  treatment: string;
  molecular_info: string;
  sample_type: string;
  data_type: string;
  value_type: string;
  platform: string;
  genome_assembly: string;
  annotation: string;
  samples_count: number;
  features_count: number;
  features_id: string;
  healthy_controls_included: boolean;
  additional_info?: string;
  project_id: number;
  submitter_username?: string;
  contact_username: string;
  project?: DumpProject;
  tags?: Array<Tag>;
  files?: Array<File>;
  perm_self?: AssoPermDatasetSelf;
  perm_files?: AssoPermDatasetFiles;
};

export type disease = "COPD" | "ASTHMA" | "CD" | "UC" | "MS" | "SLE" | "RA";

export type DumpDataset = {
  id?: number;
  version?: number;
  readonly is_latest?: boolean;
  short_name: string;
  long_name?: string;
  description?: string;
  readonly submission_date?: string;
  disease: "COPD" | "ASTHMA" | "CD" | "UC" | "MS" | "SLE" | "RA";
  treatment: string;
  molecular_info: string;
  sample_type: string;
  data_type: string;
  value_type: string;
  platform: string;
  genome_assembly: string;
  annotation: string;
  samples_count: number;
  features_count: number;
  features_id: string;
  healthy_controls_included: boolean;
  additional_info?: string;
  project_id: number;
  submitter_username?: string;
  contact_username: string;
  tags?: Array<Tag>;
  perm_self?: AssoPermDatasetSelf;
  perm_files?: AssoPermDatasetFiles;
};

export type DumpProject = {
  id?: number;
  short_name: string;
  long_name?: string;
  description?: string;
  created_at?: string;
  logo_url?: string;
  perm_datasets?: AssoPermProjectDatasets;
};

export type Error = {
  code: number;
  reason: string;
  message: string;
};

export type File = {
  id?: number;
  version?: number;
  readonly is_latest?: boolean;
  filename: string;
  extension:
    | "tsv"
    | "csv"
    | "txt"
    | "gz"
    | "rds"
    | "rda"
    | "h5ad"
    | "h5"
    | "json"
    | "yaml"
    | "yml"
    | "xml"
    | "pdf";
  size: number;
  readonly ready?: boolean;
  readonly dl_count?: number;
  readonly emited_at?: string;
  readonly validated_at?: string;
  type: "molecular" | "clinical" | "licence";
  enabled?: boolean;
  description?: string;
  submitter_username?: string;
  dataset_id: number;
  dataset_version: number;
  dataset?: DumpDataset;
  readonly upload?: Upload;
};

export type extension =
  | "tsv"
  | "csv"
  | "txt"
  | "gz"
  | "rds"
  | "rda"
  | "h5ad"
  | "h5"
  | "json"
  | "yaml"
  | "yml"
  | "xml"
  | "pdf";

export type type = "molecular" | "clinical" | "licence";

export type Group = {
  /**
   * Group name chain separated by '__'
   */
  path?: string;
  users?: Array<User>;
  children?: Array<Group>;
  readonly parent?: Group;
};

export type ListGroup = {
  id?: number;
  groups?: Array<Group>;
};

export type PartsEtag = {
  PartNumber?: number;
  ETag?: string;
};

export type Project = {
  id?: number;
  short_name: string;
  long_name?: string;
  description?: string;
  created_at?: string;
  logo_url?: string;
  datasets?: Array<Dataset>;
  perm_datasets?: AssoPermProjectDatasets;
};

export type Refresh = {
  refresh_token: string;
};

export type Tag = {
  name: string;
};

export type Upload = {
  id?: number;
  parts?: Array<UploadPart>;
};

export type UploadPart = {
  upload_id?: number;
  part_number?: number;
  etag?: string;
  form?: string;
};

export type User = {
  username?: string;
  password?: string;
  email?: string;
  firstName?: string;
  lastName?: string;
  groups?: Array<Group>;
};

export type GetLiveResponse = string;

export type GetLiveError = unknown;

export type GetLoginData = {
  query?: {
    /**
     * Redirect page
     */
    redirect_uri?: string;
  };
};

export type GetLoginResponse = string;

export type GetLoginError = unknown;

export type PostRefreshData = {
  body: Refresh;
};

export type PostRefreshResponse = {
  /**
   * Access token
   */
  access_token?: string;
  /**
   * Access token expiration
   */
  expires_in?: number;
  /**
   * Refresh token expiration
   */
  refresh_expires_in?: number;
  /**
   * Refresh token
   */
  refresh_token?: string;
};

export type PostRefreshError = Error;

export type PostLogoutData = {
  body: Refresh;
};

export type PostLogoutResponse = string;

export type PostLogoutError = Error;

export type GetSynAckData = {
  query: {
    /**
     * Login code, that will be redeemed for token
     */
    code: string;
    /**
     * Redirect page, matching login request one
     */
    redirect_uri?: string;
  };
};

export type GetSynAckResponse = {
  /**
   * Access token
   */
  access_token?: string;
  /**
   * Access token expiration
   */
  expires_in?: number;
  /**
   * Refresh token expiration
   */
  refresh_expires_in?: number;
  /**
   * Refresh token
   */
  refresh_token?: string;
};

export type GetSynAckError = Error;

export type GetSchemaResponse = unknown;

export type GetSchemaError = unknown;

export type GetAuthenticatedResponse = {
  /**
   * User name
   */
  username?: string;
  groups?: Array<string>;
};

export type GetAuthenticatedError = Error;

export type GetKcSyncResponse = string;

export type GetKcSyncError = Error;

export type PostUsersData = {
  /**
   * payload.
   */
  body: User;
};

export type PostUsersResponse = User | void;

export type PostUsersError = Error;

export type GetUsersData = {
  query?: {
    /**
     * Flag to include X-Total-Count header, comes with an extra query overhead
     */
    count?: boolean;
    email?: Array<string>;
    /**
     * page end
     */
    end?: number;
    /**
     * a comma separated list of fields to query only a subset of the resource
     * e.g. /datasets/1_1?name,description,contact,files
     *
     */
    fields?: Array<string>;
    firstName?: Array<string>;
    groups?: Array<Array<Group>>;
    lastName?: Array<string>;
    password?: Array<string>;
    /**
     * supplementary query
     */
    q?: string;
    /**
     * page start
     */
    start?: number;
    username?: Array<string>;
  };
};

export type GetUsersResponse = Array<User>;

export type GetUsersError = Error;

export type GetUsersSchemaResponse = unknown;

export type GetUsersSchemaError = unknown;

export type GetUsersByUsernameData = {
  path: {
    /**
     * User username
     */
    username: string;
  };
  query?: {
    /**
     * a comma separated list of fields to query only a subset of the resource
     * e.g. /datasets/1_1?name,description,contact,files
     *
     */
    fields?: unknown;
  };
};

export type GetUsersByUsernameResponse = User;

export type GetUsersByUsernameError = Error;

export type DeleteUsersByUsernameData = {
  path: {
    /**
     * User username
     */
    username: string;
  };
};

export type DeleteUsersByUsernameResponse = {
  /**
   * Deletion notice
   */
  message?: string;
};

export type DeleteUsersByUsernameError = Error;

export type PutUsersByUsernameData = {
  /**
   * payload.
   */
  body: User;
  path: {
    /**
     * User username
     */
    username: string;
  };
};

export type PutUsersByUsernameResponse = User | void;

export type PutUsersByUsernameError = unknown;

export type GetUsersByUsernameByAttributeData = {
  path: {
    /**
     * nested collection name
     */
    attribute: unknown;
    /**
     * User username
     */
    username: string;
  };
  query?: {
    /**
     * a comma separated list of fields to query only a subset of the resource
     * e.g. /datasets/1_1?name,description,contact,files
     *
     */
    fields?: unknown;
  };
};

export type GetUsersByUsernameByAttributeResponse = User;

export type GetUsersByUsernameByAttributeError = Error;

export type PostGroupsData = {
  /**
   * payload.
   */
  body: Group;
};

export type PostGroupsResponse = Group | void;

export type PostGroupsError = Error;

export type GetGroupsData = {
  query?: {
    children?: Array<Array<Group>>;
    /**
     * Flag to include X-Total-Count header, comes with an extra query overhead
     */
    count?: boolean;
    /**
     * page end
     */
    end?: number;
    /**
     * a comma separated list of fields to query only a subset of the resource
     * e.g. /datasets/1_1?name,description,contact,files
     *
     */
    fields?: Array<string>;
    /**
     * Group name chain separated by '__'
     */
    path?: Array<string>;
    /**
     * supplementary query
     */
    q?: string;
    /**
     * page start
     */
    start?: number;
    users?: Array<Array<User>>;
  };
};

export type GetGroupsResponse = Array<Group>;

export type GetGroupsError = Error;

export type GetGroupsSchemaResponse = unknown;

export type GetGroupsSchemaError = unknown;

export type GetGroupsByPathData = {
  path: {
    /**
     * Group name chain separated by '__'
     */
    path: string;
  };
  query?: {
    /**
     * a comma separated list of fields to query only a subset of the resource
     * e.g. /datasets/1_1?name,description,contact,files
     *
     */
    fields?: unknown;
  };
};

export type GetGroupsByPathResponse = Group;

export type GetGroupsByPathError = Error;

export type DeleteGroupsByPathData = {
  path: {
    /**
     * Group name chain separated by '__'
     */
    path: string;
  };
};

export type DeleteGroupsByPathResponse = {
  /**
   * Deletion notice
   */
  message?: string;
};

export type DeleteGroupsByPathError = Error;

export type PutGroupsByPathData = {
  /**
   * payload.
   */
  body: Group;
  path: {
    /**
     * Group name chain separated by '__'
     */
    path: string;
  };
};

export type PutGroupsByPathResponse = Group | void;

export type PutGroupsByPathError = unknown;

export type GetGroupsByPathByAttributeData = {
  path: {
    /**
     * nested collection name
     */
    attribute: unknown;
    /**
     * Group name chain separated by '__'
     */
    path: string;
  };
  query?: {
    /**
     * a comma separated list of fields to query only a subset of the resource
     * e.g. /datasets/1_1?name,description,contact,files
     *
     */
    fields?: unknown;
  };
};

export type GetGroupsByPathByAttributeResponse = Group;

export type GetGroupsByPathByAttributeError = Error;

export type PostFilesByIdByVersionVisualizeData = {
  path: {
    /**
     * File id
     */
    id: number;
    /**
     * File version
     */
    version: number;
  };
};

export type PostFilesByIdByVersionVisualizeResponse = string;

export type PostFilesByIdByVersionVisualizeError = Error;

export type GetFilesByIdByVersionDownloadData = {
  path: {
    /**
     * File id
     */
    id: number;
    /**
     * File version
     */
    version: number;
  };
};

export type GetFilesByIdByVersionDownloadResponse = string;

export type GetFilesByIdByVersionDownloadError = Error;

export type PutFilesByIdByVersionCompleteData = {
  /**
   * payload.
   */
  body: Array<PartsEtag>;
  path: {
    /**
     * File id
     */
    id: number;
    /**
     * File version
     */
    version: number;
  };
};

export type PutFilesByIdByVersionCompleteResponse = unknown;

export type PutFilesByIdByVersionCompleteError = Error;

export type PostFilesData = {
  /**
   * payload.
   */
  body: File;
};

export type PostFilesResponse = File | void;

export type PostFilesError = Error;

export type GetFilesData = {
  query?: {
    /**
     * Flag to include X-Total-Count header, comes with an extra query overhead
     */
    count?: boolean;
    dataset?: Array<DumpDataset>;
    dataset_id?: Array<number>;
    dataset_version?: Array<number>;
    description?: Array<string>;
    enabled?: boolean;
    /**
     * page end
     */
    end?: number;
    extension?: Array<
      | "tsv"
      | "csv"
      | "txt"
      | "gz"
      | "rds"
      | "rda"
      | "h5ad"
      | "h5"
      | "json"
      | "yaml"
      | "yml"
      | "xml"
      | "pdf"
    >;
    /**
     * a comma separated list of fields to query only a subset of the resource
     * e.g. /datasets/1_1?name,description,contact,files
     *
     */
    fields?: Array<string>;
    filename?: Array<string>;
    id?: Array<number>;
    /**
     * supplementary query
     */
    q?: string;
    size?: Array<number>;
    /**
     * page start
     */
    start?: number;
    submitter_username?: Array<string>;
    type?: Array<"molecular" | "clinical" | "licence">;
    version?: Array<number>;
  };
};

export type GetFilesResponse = Array<File>;

export type GetFilesError = Error;

export type GetFilesSchemaResponse = unknown;

export type GetFilesSchemaError = unknown;

export type GetFilesByIdByVersionData = {
  path: {
    /**
     * File id
     */
    id: number;
    /**
     * File version
     */
    version: number;
  };
  query?: {
    /**
     * a comma separated list of fields to query only a subset of the resource
     * e.g. /datasets/1_1?name,description,contact,files
     *
     */
    fields?: unknown;
  };
};

export type GetFilesByIdByVersionResponse = File;

export type GetFilesByIdByVersionError = Error;

export type DeleteFilesByIdByVersionData = {
  path: {
    /**
     * File id
     */
    id: number;
    /**
     * File version
     */
    version: number;
  };
};

export type DeleteFilesByIdByVersionResponse = {
  /**
   * Deletion notice
   */
  message?: string;
};

export type DeleteFilesByIdByVersionError = Error;

export type PutFilesByIdByVersionData = {
  /**
   * payload.
   */
  body: File;
  path: {
    /**
     * File id
     */
    id: number;
    /**
     * File version
     */
    version: number;
  };
};

export type PutFilesByIdByVersionResponse = File | void;

export type PutFilesByIdByVersionError = unknown;

export type GetFilesByIdByVersionByAttributeData = {
  path: {
    /**
     * nested collection name
     */
    attribute: unknown;
    /**
     * File id
     */
    id: number;
    /**
     * File version
     */
    version: number;
  };
  query?: {
    /**
     * a comma separated list of fields to query only a subset of the resource
     * e.g. /datasets/1_1?name,description,contact,files
     *
     */
    fields?: unknown;
  };
};

export type GetFilesByIdByVersionByAttributeResponse = File;

export type GetFilesByIdByVersionByAttributeError = Error;

export type PostFilesByIdByVersionReleaseData = {
  /**
   * payload - primary keys not allowed -.
   */
  body?: File;
  path: {
    /**
     * File id
     */
    id: number;
    /**
     * File version
     */
    version: number;
  };
};

export type PostFilesByIdByVersionReleaseResponse = File;

export type PostFilesByIdByVersionReleaseError = Error;

export type PostProjectsData = {
  /**
   * payload.
   */
  body: Project;
};

export type PostProjectsResponse = Project | void;

export type PostProjectsError = unknown;

export type GetProjectsData = {
  query?: {
    /**
     * Flag to include X-Total-Count header, comes with an extra query overhead
     */
    count?: boolean;
    created_at?: Array<string>;
    datasets?: Array<Array<Dataset>>;
    description?: Array<string>;
    /**
     * page end
     */
    end?: number;
    /**
     * a comma separated list of fields to query only a subset of the resource
     * e.g. /datasets/1_1?name,description,contact,files
     *
     */
    fields?: Array<string>;
    id?: Array<number>;
    logo_url?: Array<string>;
    long_name?: Array<string>;
    /**
     * supplementary query
     */
    q?: string;
    short_name?: Array<string>;
    /**
     * page start
     */
    start?: number;
  };
};

export type GetProjectsResponse = Array<Project>;

export type GetProjectsError = Error;

export type GetProjectsSchemaResponse = unknown;

export type GetProjectsSchemaError = unknown;

export type GetProjectsByIdData = {
  path: {
    /**
     * Project id
     */
    id: number;
  };
  query?: {
    /**
     * a comma separated list of fields to query only a subset of the resource
     * e.g. /datasets/1_1?name,description,contact,files
     *
     */
    fields?: unknown;
  };
};

export type GetProjectsByIdResponse = Project;

export type GetProjectsByIdError = Error;

export type DeleteProjectsByIdData = {
  path: {
    /**
     * Project id
     */
    id: number;
  };
};

export type DeleteProjectsByIdResponse = {
  /**
   * Deletion notice
   */
  message?: string;
};

export type DeleteProjectsByIdError = Error;

export type PutProjectsByIdData = {
  /**
   * payload.
   */
  body: Project;
  path: {
    /**
     * Project id
     */
    id: number;
  };
};

export type PutProjectsByIdResponse = Project | void;

export type PutProjectsByIdError = unknown;

export type GetProjectsByIdByAttributeData = {
  path: {
    /**
     * nested collection name
     */
    attribute: unknown;
    /**
     * Project id
     */
    id: number;
  };
  query?: {
    /**
     * a comma separated list of fields to query only a subset of the resource
     * e.g. /datasets/1_1?name,description,contact,files
     *
     */
    fields?: unknown;
  };
};

export type GetProjectsByIdByAttributeResponse = Project;

export type GetProjectsByIdByAttributeError = Error;

export type PostDatasetsData = {
  /**
   * payload.
   */
  body: Dataset;
};

export type PostDatasetsResponse = Dataset | void;

export type PostDatasetsError = unknown;

export type GetDatasetsData = {
  query?: {
    additional_info?: Array<string>;
    annotation?: Array<string>;
    contact_username?: Array<string>;
    /**
     * Flag to include X-Total-Count header, comes with an extra query overhead
     */
    count?: boolean;
    data_type?: Array<string>;
    description?: Array<string>;
    disease?: Array<"COPD" | "ASTHMA" | "CD" | "UC" | "MS" | "SLE" | "RA">;
    /**
     * page end
     */
    end?: number;
    features_count?: Array<number>;
    features_id?: Array<string>;
    /**
     * a comma separated list of fields to query only a subset of the resource
     * e.g. /datasets/1_1?name,description,contact,files
     *
     */
    fields?: Array<string>;
    files?: Array<Array<File>>;
    genome_assembly?: Array<string>;
    healthy_controls_included?: boolean;
    id?: Array<number>;
    long_name?: Array<string>;
    molecular_info?: Array<string>;
    platform?: Array<string>;
    project?: Array<DumpProject>;
    project_id?: Array<number>;
    /**
     * supplementary query
     */
    q?: string;
    sample_type?: Array<string>;
    samples_count?: Array<number>;
    short_name?: Array<string>;
    /**
     * page start
     */
    start?: number;
    submitter_username?: Array<string>;
    tags?: Array<Array<Tag>>;
    treatment?: Array<string>;
    value_type?: Array<string>;
    version?: Array<number>;
  };
};

export type GetDatasetsResponse = Array<Dataset>;

export type GetDatasetsError = Error;

export type GetDatasetsSchemaResponse = unknown;

export type GetDatasetsSchemaError = unknown;

export type GetDatasetsByIdByVersionData = {
  path: {
    /**
     * Dataset id
     */
    id: unknown;
    /**
     * Dataset version
     */
    version: unknown;
  };
};

export type GetDatasetsByIdByVersionResponse = Dataset;

export type GetDatasetsByIdByVersionError = unknown;

export type DeleteDatasetsByIdByVersionData = {
  path: {
    /**
     * Dataset id
     */
    id: number;
    /**
     * Dataset version
     */
    version: number;
  };
};

export type DeleteDatasetsByIdByVersionResponse = {
  /**
   * Deletion notice
   */
  message?: string;
};

export type DeleteDatasetsByIdByVersionError = Error;

export type PutDatasetsByIdByVersionData = {
  /**
   * payload.
   */
  body: Dataset;
  path: {
    /**
     * Dataset id
     */
    id: number;
    /**
     * Dataset version
     */
    version: number;
  };
};

export type PutDatasetsByIdByVersionResponse = Dataset | void;

export type PutDatasetsByIdByVersionError = unknown;

export type GetDatasetsByIdByVersionByAttributeData = {
  path: {
    /**
     * nested collection name
     */
    attribute: unknown;
    /**
     * Dataset id
     */
    id: number;
    /**
     * Dataset version
     */
    version: number;
  };
  query?: {
    /**
     * a comma separated list of fields to query only a subset of the resource
     * e.g. /datasets/1_1?name,description,contact,files
     *
     */
    fields?: unknown;
  };
};

export type GetDatasetsByIdByVersionByAttributeResponse = Dataset;

export type GetDatasetsByIdByVersionByAttributeError = Error;

export type PostDatasetsByIdByVersionReleaseData = {
  /**
   * payload - primary keys not allowed -.
   */
  body?: Dataset;
  path: {
    /**
     * Dataset id
     */
    id: number;
    /**
     * Dataset version
     */
    version: number;
  };
};

export type PostDatasetsByIdByVersionReleaseResponse = Dataset;

export type PostDatasetsByIdByVersionReleaseError = Error;

export type GetK8sSchemaResponse = unknown;

export type GetK8sSchemaError = unknown;
