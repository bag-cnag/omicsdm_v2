// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-fetch";
import type {
  GetLiveError,
  GetLiveResponse,
  GetLoginData,
  GetLoginError,
  GetLoginResponse,
  PostRefreshData,
  PostRefreshError,
  PostRefreshResponse,
  PostLogoutData,
  PostLogoutError,
  PostLogoutResponse,
  GetSynAckData,
  GetSynAckError,
  GetSynAckResponse,
  GetSchemaError,
  GetSchemaResponse,
  GetAuthenticatedError,
  GetAuthenticatedResponse,
  GetKcSyncError,
  GetKcSyncResponse,
  PostUsersData,
  PostUsersError,
  PostUsersResponse,
  GetUsersData,
  GetUsersError,
  GetUsersResponse,
  GetUsersSchemaError,
  GetUsersSchemaResponse,
  GetUsersByUsernameData,
  GetUsersByUsernameError,
  GetUsersByUsernameResponse,
  DeleteUsersByUsernameData,
  DeleteUsersByUsernameError,
  DeleteUsersByUsernameResponse,
  PutUsersByUsernameData,
  PutUsersByUsernameError,
  PutUsersByUsernameResponse,
  GetUsersByUsernameByAttributeData,
  GetUsersByUsernameByAttributeError,
  GetUsersByUsernameByAttributeResponse,
  PostGroupsData,
  PostGroupsError,
  PostGroupsResponse,
  GetGroupsData,
  GetGroupsError,
  GetGroupsResponse,
  GetGroupsSchemaError,
  GetGroupsSchemaResponse,
  GetGroupsByPathData,
  GetGroupsByPathError,
  GetGroupsByPathResponse,
  DeleteGroupsByPathData,
  DeleteGroupsByPathError,
  DeleteGroupsByPathResponse,
  PutGroupsByPathData,
  PutGroupsByPathError,
  PutGroupsByPathResponse,
  GetGroupsByPathByAttributeData,
  GetGroupsByPathByAttributeError,
  GetGroupsByPathByAttributeResponse,
  PostFilesByIdByVersionVisualizeData,
  PostFilesByIdByVersionVisualizeError,
  PostFilesByIdByVersionVisualizeResponse,
  GetFilesByIdByVersionDownloadData,
  GetFilesByIdByVersionDownloadError,
  GetFilesByIdByVersionDownloadResponse,
  PutFilesByIdByVersionCompleteData,
  PutFilesByIdByVersionCompleteError,
  PutFilesByIdByVersionCompleteResponse,
  PostFilesData,
  PostFilesError,
  PostFilesResponse,
  GetFilesData,
  GetFilesError,
  GetFilesResponse,
  GetFilesSchemaError,
  GetFilesSchemaResponse,
  GetFilesByIdByVersionData,
  GetFilesByIdByVersionError,
  GetFilesByIdByVersionResponse,
  DeleteFilesByIdByVersionData,
  DeleteFilesByIdByVersionError,
  DeleteFilesByIdByVersionResponse,
  PutFilesByIdByVersionData,
  PutFilesByIdByVersionError,
  PutFilesByIdByVersionResponse,
  GetFilesByIdByVersionByAttributeData,
  GetFilesByIdByVersionByAttributeError,
  GetFilesByIdByVersionByAttributeResponse,
  PostFilesByIdByVersionReleaseData,
  PostFilesByIdByVersionReleaseError,
  PostFilesByIdByVersionReleaseResponse,
  PostProjectsData,
  PostProjectsError,
  PostProjectsResponse,
  GetProjectsData,
  GetProjectsError,
  GetProjectsResponse,
  GetProjectsSchemaError,
  GetProjectsSchemaResponse,
  GetProjectsByIdData,
  GetProjectsByIdError,
  GetProjectsByIdResponse,
  DeleteProjectsByIdData,
  DeleteProjectsByIdError,
  DeleteProjectsByIdResponse,
  PutProjectsByIdData,
  PutProjectsByIdError,
  PutProjectsByIdResponse,
  GetProjectsByIdByAttributeData,
  GetProjectsByIdByAttributeError,
  GetProjectsByIdByAttributeResponse,
  PostDatasetsData,
  PostDatasetsError,
  PostDatasetsResponse,
  GetDatasetsData,
  GetDatasetsError,
  GetDatasetsResponse,
  GetDatasetsSchemaError,
  GetDatasetsSchemaResponse,
  GetDatasetsByIdByVersionData,
  GetDatasetsByIdByVersionError,
  GetDatasetsByIdByVersionResponse,
  DeleteDatasetsByIdByVersionData,
  DeleteDatasetsByIdByVersionError,
  DeleteDatasetsByIdByVersionResponse,
  PutDatasetsByIdByVersionData,
  PutDatasetsByIdByVersionError,
  PutDatasetsByIdByVersionResponse,
  GetDatasetsByIdByVersionByAttributeData,
  GetDatasetsByIdByVersionByAttributeError,
  GetDatasetsByIdByVersionByAttributeResponse,
  PostDatasetsByIdByVersionReleaseData,
  PostDatasetsByIdByVersionReleaseError,
  PostDatasetsByIdByVersionReleaseResponse,
  GetK8sSchemaError,
  GetK8sSchemaResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Liveness check endpoint
 */
export const getLive = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetLiveResponse,
    GetLiveError,
    ThrowOnError
  >({
    ...options,
    url: "/live",
  });
};

/**
 * Returns the url for keycloak login page
 */
export const getLogin = <ThrowOnError extends boolean = false>(
  options?: Options<GetLoginData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetLoginResponse,
    GetLoginError,
    ThrowOnError
  >({
    ...options,
    url: "/login",
  });
};

/**
 * Refresh
 */
export const postRefresh = <ThrowOnError extends boolean = false>(
  options: Options<PostRefreshData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostRefreshResponse,
    PostRefreshError,
    ThrowOnError
  >({
    ...options,
    url: "/refresh",
  });
};

/**
 * Logout
 */
export const postLogout = <ThrowOnError extends boolean = false>(
  options: Options<PostLogoutData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostLogoutResponse,
    PostLogoutError,
    ThrowOnError
  >({
    ...options,
    url: "/logout",
  });
};

/**
 * Login callback function.
 */
export const getSynAck = <ThrowOnError extends boolean = false>(
  options: Options<GetSynAckData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSynAckResponse,
    GetSynAckError,
    ThrowOnError
  >({
    ...options,
    url: "/syn_ack",
  });
};

/**
 * Returns full API schema
 */
export const getSchema = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSchemaResponse,
    GetSchemaError,
    ThrowOnError
  >({
    ...options,
    url: "/schema",
  });
};

/**
 * Route to check token validity.
 */
export const getAuthenticated = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAuthenticatedResponse,
    GetAuthenticatedError,
    ThrowOnError
  >({
    ...options,
    url: "/authenticated",
  });
};

/**
 * Route to sync DB with keycloak entities, reserved to administrators.
 */
export const getKcSync = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetKcSyncResponse,
    GetKcSyncError,
    ThrowOnError
  >({
    ...options,
    url: "/kc_sync",
  });
};

/**
 * Create new(s) entries from request body.
 */
export const postUsers = <ThrowOnError extends boolean = false>(
  options: Options<PostUsersData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostUsersResponse,
    PostUsersError,
    ThrowOnError
  >({
    ...options,
    url: "/users",
  });
};

/**
 * Uses a querystring to filter all resources of that type.
 */
export const getUsers = <ThrowOnError extends boolean = false>(
  options?: Options<GetUsersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetUsersResponse,
    GetUsersError,
    ThrowOnError
  >({
    ...options,
    url: "/users",
  });
};

/**
 * Generatate API schema for routes managed by given Controller.
 */
export const getUsersSchema = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetUsersSchemaResponse,
    GetUsersSchemaError,
    ThrowOnError
  >({
    ...options,
    url: "/users/schema",
  });
};

/**
 * Query DB for entity with matching id.
 */
export const getUsersByUsername = <ThrowOnError extends boolean = false>(
  options: Options<GetUsersByUsernameData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetUsersByUsernameResponse,
    GetUsersByUsernameError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{username}",
  });
};

/**
 * Delete resource matching id.
 */
export const deleteUsersByUsername = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUsersByUsernameData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteUsersByUsernameResponse,
    DeleteUsersByUsernameError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{username}",
  });
};

/**
 * Update an existing resource with request body.
 */
export const putUsersByUsername = <ThrowOnError extends boolean = false>(
  options: Options<PutUsersByUsernameData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PutUsersByUsernameResponse,
    PutUsersByUsernameError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{username}",
  });
};

/**
 * Query DB for nested collection of entity with matching id.
 */
export const getUsersByUsernameByAttribute = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetUsersByUsernameByAttributeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetUsersByUsernameByAttributeResponse,
    GetUsersByUsernameByAttributeError,
    ThrowOnError
  >({
    ...options,
    url: "/users/{username}/{attribute}",
  });
};

/**
 * Create new(s) entries from request body.
 */
export const postGroups = <ThrowOnError extends boolean = false>(
  options: Options<PostGroupsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostGroupsResponse,
    PostGroupsError,
    ThrowOnError
  >({
    ...options,
    url: "/groups",
  });
};

/**
 * Uses a querystring to filter all resources of that type.
 */
export const getGroups = <ThrowOnError extends boolean = false>(
  options?: Options<GetGroupsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetGroupsResponse,
    GetGroupsError,
    ThrowOnError
  >({
    ...options,
    url: "/groups",
  });
};

/**
 * Generatate API schema for routes managed by given Controller.
 */
export const getGroupsSchema = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetGroupsSchemaResponse,
    GetGroupsSchemaError,
    ThrowOnError
  >({
    ...options,
    url: "/groups/schema",
  });
};

/**
 * Query DB for entity with matching id.
 */
export const getGroupsByPath = <ThrowOnError extends boolean = false>(
  options: Options<GetGroupsByPathData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetGroupsByPathResponse,
    GetGroupsByPathError,
    ThrowOnError
  >({
    ...options,
    url: "/groups/{path}",
  });
};

/**
 * Delete resource matching id.
 */
export const deleteGroupsByPath = <ThrowOnError extends boolean = false>(
  options: Options<DeleteGroupsByPathData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteGroupsByPathResponse,
    DeleteGroupsByPathError,
    ThrowOnError
  >({
    ...options,
    url: "/groups/{path}",
  });
};

/**
 * Update an existing resource with request body.
 */
export const putGroupsByPath = <ThrowOnError extends boolean = false>(
  options: Options<PutGroupsByPathData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PutGroupsByPathResponse,
    PutGroupsByPathError,
    ThrowOnError
  >({
    ...options,
    url: "/groups/{path}",
  });
};

/**
 * Query DB for nested collection of entity with matching id.
 */
export const getGroupsByPathByAttribute = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetGroupsByPathByAttributeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetGroupsByPathByAttributeResponse,
    GetGroupsByPathByAttributeError,
    ThrowOnError
  >({
    ...options,
    url: "/groups/{path}/{attribute}",
  });
};

/**
 * Starts a visualizer instance for this file.
 */
export const postFilesByIdByVersionVisualize = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostFilesByIdByVersionVisualizeData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostFilesByIdByVersionVisualizeResponse,
    PostFilesByIdByVersionVisualizeError,
    ThrowOnError
  >({
    ...options,
    url: "/files/{id}_{version}/visualize",
  });
};

/**
 * Returns a download presigned URL to retrieve file from s3 bucket.
 */
export const getFilesByIdByVersionDownload = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetFilesByIdByVersionDownloadData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetFilesByIdByVersionDownloadResponse,
    GetFilesByIdByVersionDownloadError,
    ThrowOnError
  >({
    ...options,
    url: "/files/{id}_{version}/download",
  });
};

/**
 * Multipart upload completion.
 */
export const putFilesByIdByVersionComplete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PutFilesByIdByVersionCompleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PutFilesByIdByVersionCompleteResponse,
    PutFilesByIdByVersionCompleteError,
    ThrowOnError
  >({
    ...options,
    url: "/files/{id}_{version}/complete",
  });
};

/**
 * Create new(s) entries from request body.
 */
export const postFiles = <ThrowOnError extends boolean = false>(
  options: Options<PostFilesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostFilesResponse,
    PostFilesError,
    ThrowOnError
  >({
    ...options,
    url: "/files",
  });
};

/**
 * Uses a querystring to filter all resources of that type.
 */
export const getFiles = <ThrowOnError extends boolean = false>(
  options?: Options<GetFilesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetFilesResponse,
    GetFilesError,
    ThrowOnError
  >({
    ...options,
    url: "/files",
  });
};

/**
 * Generatate API schema for routes managed by given Controller.
 */
export const getFilesSchema = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetFilesSchemaResponse,
    GetFilesSchemaError,
    ThrowOnError
  >({
    ...options,
    url: "/files/schema",
  });
};

/**
 * Query DB for entity with matching id.
 */
export const getFilesByIdByVersion = <ThrowOnError extends boolean = false>(
  options: Options<GetFilesByIdByVersionData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetFilesByIdByVersionResponse,
    GetFilesByIdByVersionError,
    ThrowOnError
  >({
    ...options,
    url: "/files/{id}_{version}",
  });
};

/**
 * Delete resource matching id.
 */
export const deleteFilesByIdByVersion = <ThrowOnError extends boolean = false>(
  options: Options<DeleteFilesByIdByVersionData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteFilesByIdByVersionResponse,
    DeleteFilesByIdByVersionError,
    ThrowOnError
  >({
    ...options,
    url: "/files/{id}_{version}",
  });
};

/**
 * Update an existing resource with request body.
 */
export const putFilesByIdByVersion = <ThrowOnError extends boolean = false>(
  options: Options<PutFilesByIdByVersionData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PutFilesByIdByVersionResponse,
    PutFilesByIdByVersionError,
    ThrowOnError
  >({
    ...options,
    url: "/files/{id}_{version}",
  });
};

/**
 * Query DB for nested collection of entity with matching id.
 */
export const getFilesByIdByVersionByAttribute = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetFilesByIdByVersionByAttributeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetFilesByIdByVersionByAttributeResponse,
    GetFilesByIdByVersionByAttributeError,
    ThrowOnError
  >({
    ...options,
    url: "/files/{id}_{version}/{attribute}",
  });
};

/**
 * Release a versioned resource, creating a new entry with incremented version.
 */
export const postFilesByIdByVersionRelease = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostFilesByIdByVersionReleaseData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostFilesByIdByVersionReleaseResponse,
    PostFilesByIdByVersionReleaseError,
    ThrowOnError
  >({
    ...options,
    url: "/files/{id}_{version}/release",
  });
};

/**
 * Create Project from request body.
 */
export const postProjects = <ThrowOnError extends boolean = false>(
  options: Options<PostProjectsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostProjectsResponse,
    PostProjectsError,
    ThrowOnError
  >({
    ...options,
    url: "/projects",
  });
};

/**
 * Uses a querystring to filter all resources of that type.
 */
export const getProjects = <ThrowOnError extends boolean = false>(
  options?: Options<GetProjectsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProjectsResponse,
    GetProjectsError,
    ThrowOnError
  >({
    ...options,
    url: "/projects",
  });
};

/**
 * Generatate API schema for routes managed by given Controller.
 */
export const getProjectsSchema = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProjectsSchemaResponse,
    GetProjectsSchemaError,
    ThrowOnError
  >({
    ...options,
    url: "/projects/schema",
  });
};

/**
 * Query DB for entity with matching id.
 */
export const getProjectsById = <ThrowOnError extends boolean = false>(
  options: Options<GetProjectsByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProjectsByIdResponse,
    GetProjectsByIdError,
    ThrowOnError
  >({
    ...options,
    url: "/projects/{id}",
  });
};

/**
 * Delete resource matching id.
 */
export const deleteProjectsById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProjectsByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteProjectsByIdResponse,
    DeleteProjectsByIdError,
    ThrowOnError
  >({
    ...options,
    url: "/projects/{id}",
  });
};

/**
 * Update an existing resource with request body.
 */
export const putProjectsById = <ThrowOnError extends boolean = false>(
  options: Options<PutProjectsByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PutProjectsByIdResponse,
    PutProjectsByIdError,
    ThrowOnError
  >({
    ...options,
    url: "/projects/{id}",
  });
};

/**
 * Query DB for nested collection of entity with matching id.
 */
export const getProjectsByIdByAttribute = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetProjectsByIdByAttributeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProjectsByIdByAttributeResponse,
    GetProjectsByIdByAttributeError,
    ThrowOnError
  >({
    ...options,
    url: "/projects/{id}/{attribute}",
  });
};

export const postDatasets = <ThrowOnError extends boolean = false>(
  options: Options<PostDatasetsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostDatasetsResponse,
    PostDatasetsError,
    ThrowOnError
  >({
    ...options,
    url: "/datasets",
  });
};

/**
 * Uses a querystring to filter all resources of that type.
 */
export const getDatasets = <ThrowOnError extends boolean = false>(
  options?: Options<GetDatasetsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetDatasetsResponse,
    GetDatasetsError,
    ThrowOnError
  >({
    ...options,
    url: "/datasets",
  });
};

/**
 * Generatate API schema for routes managed by given Controller.
 */
export const getDatasetsSchema = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetDatasetsSchemaResponse,
    GetDatasetsSchemaError,
    ThrowOnError
  >({
    ...options,
    url: "/datasets/schema",
  });
};

export const getDatasetsByIdByVersion = <ThrowOnError extends boolean = false>(
  options: Options<GetDatasetsByIdByVersionData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetDatasetsByIdByVersionResponse,
    GetDatasetsByIdByVersionError,
    ThrowOnError
  >({
    ...options,
    url: "/datasets/{id}_{version}",
  });
};

/**
 * Delete resource matching id.
 */
export const deleteDatasetsByIdByVersion = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteDatasetsByIdByVersionData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteDatasetsByIdByVersionResponse,
    DeleteDatasetsByIdByVersionError,
    ThrowOnError
  >({
    ...options,
    url: "/datasets/{id}_{version}",
  });
};

/**
 * Update an existing resource with request body.
 */
export const putDatasetsByIdByVersion = <ThrowOnError extends boolean = false>(
  options: Options<PutDatasetsByIdByVersionData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PutDatasetsByIdByVersionResponse,
    PutDatasetsByIdByVersionError,
    ThrowOnError
  >({
    ...options,
    url: "/datasets/{id}_{version}",
  });
};

/**
 * Query DB for nested collection of entity with matching id.
 */
export const getDatasetsByIdByVersionByAttribute = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetDatasetsByIdByVersionByAttributeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetDatasetsByIdByVersionByAttributeResponse,
    GetDatasetsByIdByVersionByAttributeError,
    ThrowOnError
  >({
    ...options,
    url: "/datasets/{id}_{version}/{attribute}",
  });
};

/**
 * Release a versioned resource, creating a new entry with incremented version.
 */
export const postDatasetsByIdByVersionRelease = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostDatasetsByIdByVersionReleaseData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostDatasetsByIdByVersionReleaseResponse,
    PostDatasetsByIdByVersionReleaseError,
    ThrowOnError
  >({
    ...options,
    url: "/datasets/{id}_{version}/release",
  });
};

export const getK8s = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<void, unknown, ThrowOnError>({
    ...options,
    url: "/k8s/",
  });
};

export const getK8sInstanceById = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<void, unknown, ThrowOnError>({
    ...options,
    url: "/k8s/instance/{id}",
  });
};

/**
 * Generatate API schema for routes managed by given Controller.
 */
export const getK8sSchema = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetK8sSchemaResponse,
    GetK8sSchemaError,
    ThrowOnError
  >({
    ...options,
    url: "/k8s/schema",
  });
};
