// This file is auto-generated by @hey-api/openapi-ts

export const RefreshSchema = {
  type: "object",
  properties: {
    refresh_token: {
      type: "string",
    },
  },
  required: ["refresh_token"],
  additionalProperties: false,
} as const;

export const ErrorSchema = {
  type: "object",
  properties: {
    code: {
      type: "number",
    },
    reason: {
      type: "string",
    },
    message: {
      type: "string",
    },
  },
  required: ["code", "message", "reason"],
  additionalProperties: false,
} as const;

export const GroupSchema = {
  type: "object",
  properties: {
    path: {
      type: "string",
      description: "Group name chain separated by '__'",
    },
    users: {
      type: "array",
      items: {
        $ref: "#/components/schemas/User",
      },
    },
    children: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Group",
      },
    },
    parent: {
      readOnly: true,
      allOf: [
        {
          $ref: "#/components/schemas/Group",
        },
      ],
    },
  },
  additionalProperties: false,
} as const;

export const UserSchema = {
  type: "object",
  properties: {
    username: {
      type: "string",
    },
    password: {
      type: "string",
      writeOnly: true,
    },
    email: {
      type: "string",
    },
    firstName: {
      type: "string",
    },
    lastName: {
      type: "string",
    },
    groups: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Group",
      },
    },
  },
  additionalProperties: false,
} as const;

export const PartsEtagSchema = {
  type: "object",
  properties: {
    PartNumber: {
      type: "integer",
    },
    ETag: {
      type: "string",
    },
  },
  additionalProperties: false,
} as const;

export const TagSchema = {
  type: "object",
  properties: {
    name: {
      type: "string",
    },
  },
  required: ["name"],
  additionalProperties: false,
} as const;

export const ListGroupSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    groups: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Group",
      },
    },
  },
  additionalProperties: false,
} as const;

export const AssoPermDatasetSelfSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    version: {
      type: "integer",
    },
    id_read: {
      type: "integer",
    },
    read: {
      $ref: "#/components/schemas/ListGroup",
    },
    id_download: {
      type: "integer",
    },
    download: {
      $ref: "#/components/schemas/ListGroup",
    },
  },
  additionalProperties: false,
} as const;

export const AssoPermDatasetFilesSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    version: {
      type: "integer",
    },
    id_write: {
      type: "integer",
    },
    write: {
      $ref: "#/components/schemas/ListGroup",
    },
  },
  additionalProperties: false,
} as const;

export const DumpDatasetSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    version: {
      type: "integer",
    },
    is_latest: {
      type: "boolean",
      readOnly: true,
    },
    short_name: {
      type: "string",
    },
    long_name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    submission_date: {
      type: "string",
      format: "date",
      readOnly: true,
    },
    disease: {
      type: "string",
      enum: ["COPD", "ASTHMA", "CD", "UC", "MS", "SLE", "RA"],
    },
    treatment: {
      type: "string",
    },
    molecular_info: {
      type: "string",
    },
    sample_type: {
      type: "string",
    },
    data_type: {
      type: "string",
    },
    value_type: {
      type: "string",
    },
    platform: {
      type: "string",
    },
    genome_assembly: {
      type: "string",
    },
    annotation: {
      type: "string",
    },
    samples_count: {
      type: "integer",
    },
    features_count: {
      type: "integer",
    },
    features_id: {
      type: "string",
    },
    healthy_controls_included: {
      type: "boolean",
    },
    additional_info: {
      type: "string",
    },
    project_id: {
      type: "integer",
    },
    submitter_username: {
      type: "string",
    },
    contact_username: {
      type: "string",
    },
    tags: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Tag",
      },
    },
    perm_self: {
      $ref: "#/components/schemas/AssoPermDatasetSelf",
    },
    perm_files: {
      $ref: "#/components/schemas/AssoPermDatasetFiles",
    },
  },
  required: [
    "annotation",
    "contact_username",
    "data_type",
    "disease",
    "features_count",
    "features_id",
    "genome_assembly",
    "healthy_controls_included",
    "molecular_info",
    "platform",
    "project_id",
    "sample_type",
    "samples_count",
    "short_name",
    "treatment",
    "value_type",
  ],
  additionalProperties: false,
} as const;

export const UploadPartSchema = {
  type: "object",
  properties: {
    upload_id: {
      type: "integer",
    },
    part_number: {
      type: "integer",
    },
    etag: {
      type: "string",
    },
    form: {
      type: "string",
    },
  },
  additionalProperties: false,
} as const;

export const UploadSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    parts: {
      type: "array",
      items: {
        $ref: "#/components/schemas/UploadPart",
      },
    },
  },
  additionalProperties: false,
} as const;

export const FileSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    version: {
      type: "integer",
    },
    is_latest: {
      type: "boolean",
      readOnly: true,
    },
    filename: {
      type: "string",
    },
    extension: {
      type: "string",
      enum: [
        "tsv",
        "csv",
        "txt",
        "gz",
        "rds",
        "rda",
        "h5ad",
        "h5",
        "json",
        "yaml",
        "yml",
        "xml",
        "pdf",
      ],
    },
    size: {
      type: "integer",
      minimum: 24,
      maximum: 107374182400,
    },
    ready: {
      type: "boolean",
      readOnly: true,
    },
    dl_count: {
      type: "integer",
      readOnly: true,
    },
    emited_at: {
      type: "string",
      format: "date",
      readOnly: true,
    },
    validated_at: {
      type: "string",
      format: "date",
      readOnly: true,
    },
    type: {
      type: "string",
      enum: ["molecular", "clinical", "licence"],
    },
    enabled: {
      type: "boolean",
    },
    description: {
      type: "string",
    },
    submitter_username: {
      type: "string",
    },
    dataset_id: {
      type: "integer",
    },
    dataset_version: {
      type: "integer",
    },
    dataset: {
      $ref: "#/components/schemas/DumpDataset",
    },
    upload: {
      readOnly: true,
      allOf: [
        {
          $ref: "#/components/schemas/Upload",
        },
      ],
    },
  },
  required: [
    "dataset_id",
    "dataset_version",
    "extension",
    "filename",
    "size",
    "type",
  ],
  additionalProperties: false,
} as const;

export const AssoPermProjectDatasetsSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    id_write: {
      type: "integer",
    },
    write: {
      $ref: "#/components/schemas/ListGroup",
    },
    id_download: {
      type: "integer",
    },
    download: {
      $ref: "#/components/schemas/ListGroup",
    },
  },
  additionalProperties: false,
} as const;

export const DumpProjectSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    short_name: {
      type: "string",
    },
    long_name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    created_at: {
      type: "string",
      format: "date",
    },
    logo_url: {
      type: "string",
    },
    perm_datasets: {
      $ref: "#/components/schemas/AssoPermProjectDatasets",
    },
  },
  required: ["short_name"],
  additionalProperties: false,
} as const;

export const DatasetSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    version: {
      type: "integer",
    },
    is_latest: {
      type: "boolean",
      readOnly: true,
    },
    short_name: {
      type: "string",
    },
    long_name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    submission_date: {
      type: "string",
      format: "date",
      readOnly: true,
    },
    disease: {
      type: "string",
      enum: ["COPD", "ASTHMA", "CD", "UC", "MS", "SLE", "RA"],
    },
    treatment: {
      type: "string",
    },
    molecular_info: {
      type: "string",
    },
    sample_type: {
      type: "string",
    },
    data_type: {
      type: "string",
    },
    value_type: {
      type: "string",
    },
    platform: {
      type: "string",
    },
    genome_assembly: {
      type: "string",
    },
    annotation: {
      type: "string",
    },
    samples_count: {
      type: "integer",
    },
    features_count: {
      type: "integer",
    },
    features_id: {
      type: "string",
    },
    healthy_controls_included: {
      type: "boolean",
    },
    additional_info: {
      type: "string",
    },
    project_id: {
      type: "integer",
    },
    submitter_username: {
      type: "string",
    },
    contact_username: {
      type: "string",
    },
    project: {
      $ref: "#/components/schemas/DumpProject",
    },
    tags: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Tag",
      },
    },
    files: {
      type: "array",
      items: {
        $ref: "#/components/schemas/File",
      },
    },
    perm_self: {
      $ref: "#/components/schemas/AssoPermDatasetSelf",
    },
    perm_files: {
      $ref: "#/components/schemas/AssoPermDatasetFiles",
    },
  },
  required: [
    "annotation",
    "contact_username",
    "data_type",
    "disease",
    "features_count",
    "features_id",
    "genome_assembly",
    "healthy_controls_included",
    "molecular_info",
    "platform",
    "project_id",
    "sample_type",
    "samples_count",
    "short_name",
    "treatment",
    "value_type",
  ],
  additionalProperties: false,
} as const;

export const ProjectSchema = {
  type: "object",
  properties: {
    id: {
      type: "integer",
    },
    short_name: {
      type: "string",
    },
    long_name: {
      type: "string",
    },
    description: {
      type: "string",
    },
    created_at: {
      type: "string",
      format: "date",
    },
    logo_url: {
      type: "string",
    },
    datasets: {
      type: "array",
      items: {
        $ref: "#/components/schemas/Dataset",
      },
    },
    perm_datasets: {
      $ref: "#/components/schemas/AssoPermProjectDatasets",
    },
  },
  required: ["short_name"],
  additionalProperties: false,
} as const;
