def BuildAndCopyMibsHere(branch, credentials, project_folder, content) {
    sh "rm -r -f " + project_folder
    withCredentials([string(credentialsId: credentials, variable: 'gitea_token')]) {
        sh "git clone -c http.sslVerify=false -b " + branch + " https://" + gitea_token + ":x-oauth-basic@gitea.gpapdev.cnag.eu/gitea/platform/" + project_folder + " " + project_folder
        sh "cd " + project_folder + " && git fetch --all"

        try {
            sh "cd " + project_folder + " && git checkout -b " + branch
        } catch(Exception e) {
            sh "cd " + project_folder + " && git checkout  " + branch
            println(e);
        }
  
        try {
            sh "cd " + project_folder + " && git pull origin " + branch 
        } catch(Exception e) {
            println(e);
        }

        sh "cp " + content + " " + project_folder + "/."
        sh "cd " + project_folder + " && if [ \$(git status --porcelain | wc -l) -gt 0 ]; then git add * && git commit -m 'Latest build' -i * && git push origin " + branch + "; else echo 'No changes to commit'; fi"
    }
}

pipeline {
    agent any
    stages {
        // For later when we'll have tests.
        // stage('install pytest') {
        //     steps {
        //         withPythonEnv('python3') {
        //             sh 'pip install pytest'
        //         }
        //     }
        // }
        // stage('run tests') {
        //     steps {
        //         withPythonEnv('python3') {
        //             sh 'pytest .'
        //         }
        //     }
        // }
        stage('valid step'){
            steps {
                sh 'touch .'
            }
        }
    }

    post {
        // For when we'll have tests.
        // always {
        //     archiveArtifacts artifacts: './server/*', fingerprint: true
        // }

        success {
            sh 'rm -f omicsdm-v2_server.tgz'
            sh 'tar -zcvf omicsdm-v2_server.tgz --exclude=__pycache__ --exclude=.env --exclude=scripts --exclude=docker --exclude=keycloak server'
            BuildAndCopyMibsHere(env.BRANCH_NAME, 'gitea_apapakon_token', 'omicsdm-v2_server_artifact', 'omicsdm-v2_server.tgz')
            slackSend color: "good", message: "Job: ${env.JOB_NAME} with buildnumber ${env.BUILD_NUMBER} was successful"
        }

        failure {
            script {
                slackSend color: "danger", message: "Job: ${env.JOB_NAME} with buildnumber ${env.BUILD_NUMBER} was failed"
            }
        }
    }
}
